// 执行命令函数
var spawn = require("child_process").spawn,
	iconv = require("iconv-lite/lib"),
	supportRunner = {}

// 接到命令
/*
	{
		runner: "fekit" // or "oniui"
		cmd: "install xxx" // or "install xxx" or "[fekit] oniui install xxx"
		cwd: path// 目录
	}
 */
$eventManager.$watch("cmd", function(data) {
	var runner = data.runner,
		callback = data.callback || function() {}
	if(exports[runner]) {
		return exports[runner](data, callback)
	}
	// check command
	if(!supportRunner[runner]) {
		logger.log("checking " + runner)
		getCMD({
			cmd: runner
		}, function(result) {
			if(result) {
				logger.success(runner + " is installed")
				supportRunner[runner] = true
				logger.log("executing " + runner + " " + data.cmd + "...")
				excute(data, callback)
			} else {
				logger.error(runner + " is uninstalled")
				callback({
					status: 600,
					error: [runner + " is uninstalled"]
				})
			}
		})
	} else {
		logger.log("executing " + runner + " " + data.cmd + "...")
		excute(data, callback)
	}
})

// // 执行命令
function excute(data, callback) {
	var result = {
			msg: [], 
			pids: [], 
			status: 0, 
			data: data, 
			self: NaN,
			error: []}, run, callback = callback || noop
	try {
		var cmd = data && data.cmd || []
		if(!(cmd instanceof Array)) cmd = [cmd]
		run = spawn(data.runner, cmd, {
			cwd: data && data.cwd || targetDir || installDir
		})
		result.self = run.pid
		// 出错
		run.stderr.on("data", function(data) {
			result.error.push(iconv.decode(data, 'GBK').toString("UTF8"))
			result.status = 250
			callback(result)
		})
		// 输出数据
		run.stdout.on("data", function(data) {
			var info = iconv.decode(data, 'GBK').toString("UTF8"), pid
			// 提取log里包含的pid
			if(pid = info.match(/pid=[0-9]+/g)) {
				pid.forEach(function(value, index) {
					pid[index] = value.replace(/[^0-9]+/g, "")
				})
				return result.pids = result.pids.concat(pid)
			}
			result.msg.push(info)
			// 及时输出log
			logger.log(info)
		})
		// 关闭
		run.on("close", function(code, signal) {
			result.status = code
			result.msg.push(code + " " + signal)
			callback(result)
		})
		result.process = run
	} catch(e) {
		result.status = 300
		result.error.push(e.toString())
		callback(result)
	}
}
// // 执行commands里的shell命令
function runCommandsShell(shell, data, callback) {
	excute({
		runner: installDir + "/commands/" + shell + isWindows,
		cmd: data && data.cmd,
		cwd: data && data.cwd
	}, callback)
}
// check cmd
function getCMD(data, callback) {
	runCommandsShell("getCMD", data, function(result) {
		var msg = result.msg.join("---"),
			runner = data.cmd instanceof Array ? data.cmd[0] : data.cmd
		if(result.status || !msg.match(runner)) {
			callback(false)
		} else {
			callback(true)
		}
	})
}
// get node procees
function getNode(data, callback) {
	runCommandsShell("getNode", data, function(result) {
		callback(result)
	})
}
// kill node procees
function killNode(data, callback) {
	runCommandsShell("killNode", data, function(result) {
		callback(result)
	})
}
// get getDisk
function getDisk(data, callback) {
	runCommandsShell("getDisk", {}, function(result) {
		callback(result)
	})
}
exports.getDisk = getDisk
exports.getNode = getNode
exports.killNode = killNode
exports.getCMD = getCMD