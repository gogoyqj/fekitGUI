var events = require('events');
var fs = require('fs');
var path = require('path');
var jade = require('jade');
var util = require('util');
var mime = require('mime');

// Our type
function Folder(jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;

  var self = this;
  // Click on blank
  this.element.parent().on('click', function() {
    self.element.children('.focus').removeClass('focus');
  });
  // Click on file
  this.element.delegate('.file', 'click', function(e) {
    self.element.children('.focus').removeClass('focus');
    $(this).addClass('focus');
    e.stopPropagation();
  });
  // Double click on file
  this.element.delegate('.file', 'dblclick', function() {
    var file_path = $(this).attr('data-path');
    self.emit('navigate', file_path, mime.stat(file_path));
  });
}

util.inherits(Folder, events.EventEmitter);

Folder.prototype.open = function(dir, fileFilter) {
  var self = this;
  fs.readdir(dir, function(error, files) {
    if (error) {
      global.logger.error(error);
      return;
    }
    var isProject = fs.existsSync(path.join(dir, "fekit.config")),
        newFiles = [];
    for (var i = 0; i < files.length; ++i) {
      var fname = path.join(dir, files[i]),
          state = mime.stat(fname);
      if(fileFilter && fileFilter(state, isProject)) continue;
      state._type = state.type;
      if(state.type === "folder") {
        var fkitcfg = fname + "\\" + "fekit.config";
        if (fs.existsSync(fkitcfg)) {
          state.isProject = fkitcfg; 
          state._type = "fekit";
        }
      }
      newFiles.push(state);
    }
    self.emit("files", dir, {
      files: newFiles
    });
    // self.element.html(gen_files_view({ files: newFiles }));
  });
}

exports.Folder = Folder; 
