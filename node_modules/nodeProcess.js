var spawn = require("child_process").spawn,
	isWindows = process.platform === "win32" ? ".bat" : "",
	cwd = process.cwd(),
	iconv = require("iconv-lite/lib")

	function getInfo(type, args, callback) {
		var cmd = type + isWindows,
			args = args || [],
			stamp = +(new Date()),
			isNode = type && type.match(/node/gi)
			try {
				var msg = [],
					run = spawn(cmd, args, {
						cwd: cwd + "\\xx"
					})
					run.on("close", function(code) {
						var processes = {}
						msg.forEach(function(item) {
							var numbers = item.match(/\s[0-9]+\s/g)
							if (numbers) {
								processes[numbers[0].trim()] = stamp
							}
						})
						var m = {
							msg: msg,
							stamp: stamp,
							error: code > 1 ? "错误码:" + code : 0,
							processes: processes,
						}
						callback && callback(m)
						msg = null
					})
					run.stdout.on("data", function(data) {
						var str = iconv.decode(data, 'GBK').toString("UTF8")
						if ((isNode && str.match(/node/g) || !isNode) && str.indexOf(cwd) == -1) {
							// global.logger.log(str)
							msg.push(str)
						}
					})
					run.stderr.on("data", function(data) {
						var str = iconv.decode(data, 'GBK').toString("UTF8")
						callback({
							error: str,
							stamp: stamp,
						})
						global.logger.error("[ERROR] " + str)
					})
			} catch (e) {
				callback({
					error: e,
					stamp: stamp,
				})
				global.logger.error("[ERROR] " + e)
			}
	}

exports.nodeProcess = {
	get: function(callback) {
		getInfo("getNode", "", callback)
	},
	kill: function(id, callback) {
		getInfo("killNode", [id], callback)
	},
	getInfo: getInfo,
}